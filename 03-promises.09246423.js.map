{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAYC,SAASC,cAAc,SAEzC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACWC,KAAKC,SAAW,GAGtCJ,EAAQ,C,SAACH,E,MAAUC,IAGnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAGtBA,EAAM,G,CAIb,SAASO,GAAcR,SAAEA,EAAQC,MAAEA,IACjCP,EAAAe,OAAOC,QAAS,uBAAqBV,QAAiBC,MAAW,CAC/DU,QAAS,IACVC,MAAO,S,CAIV,SAASC,GAASb,SAAEA,EAAQC,MAAEA,IAC5BP,EAAAe,OAAOK,QAAS,sBAAoBd,QAAeC,MAAW,CAC5DU,QAAS,IACTC,MAAO,S,CAyBXhB,EAAUmB,iBAAiB,UApB3B,SAAyBC,GACvBA,EAAGC,iBAEH,MAAMC,EAAW,IAAIC,SAASH,EAAGI,eACjC,IAAIC,EAAa,GAEjB,IAAK,MAAOC,EAAKC,KAAUL,EAASM,UAClCH,EAAWC,GAAOG,OAAOF,GAG3B,IAAItB,MAAEA,EAAKyB,KAAEA,EAAIC,OAAEA,GAAWN,EAE9B,IAAK,IAAIO,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChC3B,GAASyB,EACT3B,EAAc6B,EAAG3B,GAAO4B,KAAKrB,GAAcsB,MAAMjB,GAGnDjB,EAAUmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputData = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n// this function returns promise with result which depends of random value const shouldResolve  \n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n    // Fulfill\n    resolve({position, delay})\n    } else {\n    // Reject\n    reject({position, delay})\n    }\n  // after delay seconds signal that the job is done \"Fulfilled\" or \"Rejected\"\n    }, delay);\n  });\n}\n// Show promise with state: \"fulfilled\" result: value \nfunction onSuccessful ({ position, delay }) {\n  Notify.success (`✅ Fulfilled promise ${position} in ${delay}ms`,\n   {timeout: 6000,\n   width: '320px',\n   });\n}\n// Show promise with state: \"rejected\" result: error\nfunction onError ({ position, delay }) {\n  Notify.failure (`❌ Rejected promise ${position} in ${delay}ms`,\n   {timeout: 6000,\n    width: '320px',\n   });\n}\n\n// create a function which will work when the button was pushed and show notify messages \nfunction createPromises (ev) {\n  ev.preventDefault();\n//create empty object formData for getting data from HTML\n  const formData = new FormData(ev.currentTarget);\n  let parameters = {};\n// make iteration for creating array with values\n  for (const [key, value] of formData.entries()) {\n    parameters[key] = Number(value);\n  }\n// Array with values\n  let { delay, step, amount } = parameters;\n// do loops for creating promise, i = position\n  for (let i = 1; i <= amount; i += 1) {\n    delay += step;\n    createPromise(i, delay).then(onSuccessful).catch(onError);\n  }\n// when all promises was created - clean form\n  inputData.reset();\n}\n\ninputData.addEventListener('submit', createPromises);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$inputData","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$onSuccessful","Notify","success","timeout","width","$47d4ff9957288465$var$onError","failure","addEventListener","ev","preventDefault","formData","FormData","currentTarget","parameters","key","value","entries","Number","step","amount","i","then","catch","reset"],"version":3,"file":"03-promises.09246423.js.map"}